from naoqi import ALProxy

global ROBOT_IP
global ROBOT_PORT
global motion

motion = None

def anim_storevar(IP, PORT):
	try:
		global ROBOT_IP
		global ROBOT_PORT
		global motion
		ROBOT_IP = str(IP)
		ROBOT_PORT = PORT
		print("ANIM: Received IP: " + str(ROBOT_IP))
		print("ANIM: Received port: " + str(ROBOT_PORT))
		motion = ALProxy("ALMotion", ROBOT_IP, ROBOT_PORT)
		print("ANIM: Successfully connected to ALMotion on " + str(ROBOT_IP) + ":" + str(ROBOT_PORT))
	except BaseException, err:
		print("ANIM: Error connecting to ALMotion:")
		print(str(err))
		motion.wakeUp()
		print("ANIM: Woke up robot")

def anim_macarena():
	print("ANIM: Performing macarena")
	# Choregraphe bezier export in Python.
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.185153, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195395, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.184736, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.19569, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("HipPitch")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.561252, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0320451, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.552645, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0430962, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("HipRoll")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("KneePitch")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.00502859, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00262045, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00262045, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00196798, [3, -0.185185, -0.00014287], [3, 0.185185, 0.00014287]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [0.274263, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00385461, [3, -0.185185, 0], [3, 0.185185, 0]], [0.263909, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0171954, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.0147447, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0154849, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0154849, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0176013, [3, -0.185185, 0.00211635], [3, 0.185185, -0.00211635]], [-1.42116, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.42116, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.55843, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.55843, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.41062, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.41062, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.912755, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.912755, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.912755, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.912755, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.912755, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.524658, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.0182689, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0342458, [3, -0.185185, 0.0525147], [3, 0.185185, -0.0525147]], [-2.07654, [3, -0.185185, 0], [3, 0.185185, 0]], [-2.07394, [3, -0.185185, -0.00260044], [3, 0.185185, 0.00260044]], [0.327883, [3, -0.185185, 0], [3, 0.185185, 0]], [0.327883, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.41315, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.41315, [3, -0.185185, 0], [3, 0.185185, 0]], [0.503686, [3, -0.185185, 0], [3, 0.185185, 0]], [0.503686, [3, -0.185185, 0], [3, 0.185185, 0]], [0.303012, [3, -0.185185, 0], [3, 0.185185, 0]], [0.303012, [3, -0.185185, 0], [3, 0.185185, 0]], [0.303012, [3, -0.185185, 0], [3, 0.185185, 0]], [0.303012, [3, -0.185185, 0], [3, 0.185185, 0]], [0.303012, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.22807, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.969495, [3, -0.185185, 0], [3, 0.185185, 0]], [0.969237, [3, -0.185185, 0], [3, 0.185185, 0]], [0.969237, [3, -0.185185, 0], [3, 0.185185, 0]], [0.969495, [3, -0.185185, 0], [3, 0.185185, 0]], [0.969495, [3, -0.185185, 0], [3, 0.185185, 0]], [0.969495, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966262, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966262, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.609164, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.047855, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0473003, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0473003, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0449321, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.144272, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.144272, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.144763, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.144763, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.256438, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.256438, [3, -0.185185, 0], [3, 0.185185, 0]], [1.39602, [3, -0.185185, 0], [3, 0.185185, 0]], [1.39602, [3, -0.185185, 0], [3, 0.185185, 0]], [1.38564, [3, -0.185185, 0], [3, 0.185185, 0]], [1.39581, [3, -0.185185, 0], [3, 0.185185, 0]], [1.38561, [3, -0.185185, 0], [3, 0.185185, 0]], [1.557, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.122234, [3, -0.185185, 0], [3, 0.185185, 0]], [0.131185, [3, -0.185185, 0], [3, 0.185185, 0]], [0.131185, [3, -0.185185, 0], [3, 0.185185, 0]], [0.127439, [3, -0.185185, 0], [3, 0.185185, 0]], [0.210687, [3, -0.185185, 0], [3, 0.185185, 0]], [0.210687, [3, -0.185185, 0], [3, 0.185185, 0]], [1.06011, [3, -0.185185, 0], [3, 0.185185, 0]], [1.06011, [3, -0.185185, 0], [3, 0.185185, 0]], [0.115331, [3, -0.185185, 0], [3, 0.185185, 0]], [0.115331, [3, -0.185185, 0], [3, 0.185185, 0]], [0.551257, [3, -0.185185, 0], [3, 0.185185, 0]], [0.551257, [3, -0.185185, 0], [3, 0.185185, 0]], [0.551257, [3, -0.185185, 0], [3, 0.185185, 0]], [0.551257, [3, -0.185185, 0], [3, 0.185185, 0]], [0.551257, [3, -0.185185, 0], [3, 0.185185, 0]], [0.14761, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.00198645, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0100938, [3, -0.185185, 0.0120802], [3, 0.185185, -0.0120802]], [-1.04834, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04587, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04823, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04823, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04539, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04539, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04384, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04384, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04356, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04356, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04356, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04356, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04356, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00378925, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.520892, [3, -0.185185, 0], [3, 0.185185, 0]], [0.0206586, [3, -0.185185, 0], [3, 0.185185, 0]], [0.0206586, [3, -0.185185, 0], [3, 0.185185, 0]], [0.0288264, [3, -0.185185, 0], [3, 0.185185, 0]], [0.0210551, [3, -0.185185, 0], [3, 0.185185, 0]], [0.964602, [3, -0.185185, 0], [3, 0.185185, 0]], [0.964486, [3, -0.185185, 0], [3, 0.185185, 0]], [1.55271, [3, -0.185185, 0], [3, 0.185185, 0]], [1.54285, [3, -0.185185, 0.00985756], [3, 0.185185, -0.00985756]], [1.26185, [3, -0.185185, 0.00722569], [3, 0.185185, -0.00722569]], [1.25462, [3, -0.185185, 0.00722569], [3, 0.185185, -0.00722569]], [0.940188, [3, -0.185185, 0], [3, 0.185185, 0]], [0.940188, [3, -0.185185, 0], [3, 0.185185, 0]], [0.940188, [3, -0.185185, 0], [3, 0.185185, 0]], [0.940188, [3, -0.185185, 0], [3, 0.185185, 0]], [0.5248, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[1.22214, [3, -0.185185, 0], [3, 0.185185, 0]], [0.15309, [3, -0.185185, 0], [3, 0.185185, 0]], [0.15309, [3, -0.185185, 0], [3, 0.185185, 0]], [2.08092, [3, -0.185185, 0], [3, 0.185185, 0]], [2.07844, [3, -0.185185, 0.00247834], [3, 0.185185, -0.00247834]], [0.134411, [3, -0.185185, 0], [3, 0.185185, 0]], [0.136976, [3, -0.185185, -0.00256528], [3, 0.185185, 0.00256528]], [1.51748, [3, -0.185185, 0], [3, 0.185185, 0]], [1.51731, [3, -0.185185, 0.000167513], [3, 0.185185, -0.000167513]], [-0.418214, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.415898, [3, -0.185185, -0.00231605], [3, 0.185185, 0.00231605]], [-0.302162, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.302162, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.302162, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.302162, [3, -0.185185, 0], [3, 0.185185, 0]], [1.2281, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.605351, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.609486, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[1.5519, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00935503, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00935503, [3, -0.185185, 0], [3, 0.185185, 0]], [0.0120252, [3, -0.185185, -0.000562842], [3, 0.185185, 0.000562842]], [0.0127321, [3, -0.185185, 0], [3, 0.185185, 0]], [0.000380218, [3, -0.185185, 0.000261011], [3, 0.185185, -0.000261011]], [0.000119207, [3, -0.185185, 0], [3, 0.185185, 0]], [0.000119207, [3, -0.185185, 0], [3, 0.185185, 0]], [0.000118043, [3, -0.185185, 0], [3, 0.185185, 0]], [0.150504, [3, -0.185185, 0], [3, 0.185185, 0]], [0.143036, [3, -0.185185, 0], [3, 0.185185, 0]], [1.41234, [3, -0.185185, 0], [3, 0.185185, 0]], [1.40233, [3, -0.185185, 0], [3, 0.185185, 0]], [1.41256, [3, -0.185185, 0], [3, 0.185185, 0]], [1.41254, [3, -0.185185, 0], [3, 0.185185, 0]], [1.55297, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.148751, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.158237, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.158237, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.159238, [3, -0.185185, 0.00043098], [3, 0.185185, -0.00043098]], [-0.160823, [3, -0.185185, 0.00158511], [3, 0.185185, -0.00158511]], [-0.172176, [3, -0.185185, 0.00357036], [3, 0.185185, -0.00357036]], [-0.182246, [3, -0.185185, 0.0100693], [3, 0.185185, -0.0100693]], [-1.13835, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.13536, [3, -0.185185, -0.0029898], [3, 0.185185, 0.0029898]], [-0.266555, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.273366, [3, -0.185185, 0.00681027], [3, 0.185185, -0.00681027]], [-0.551158, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.551158, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.551158, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.551158, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.147967, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.00324713, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.231752, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.231752, [3, -0.185185, 0], [3, 0.185185, 0]], [0.910491, [3, -0.185185, 0], [3, 0.185185, 0]], [0.90229, [3, -0.185185, 0], [3, 0.185185, 0]], [0.90229, [3, -0.185185, 0], [3, 0.185185, 0]], [0.897642, [3, -0.185185, 0], [3, 0.185185, 0]], [0.897642, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894685, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894685, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894684, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894684, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894684, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894684, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894684, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00332906, [3, -0.185185, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Macarena finished")
	except BaseException, err:
	  print err

def anim_hello():
	# Choregraphe bezier export in Python.
	from naoqi import ALProxy
	print("ANIM: Performing hello")
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[-0.163524, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.163524, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.163524, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.195316, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[0.00566939, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00566939, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00566939, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00566939, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HipPitch")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[-0.046405, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.046405, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.046405, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.046405, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HipRoll")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[-0.000499833, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.000499833, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.000499833, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.000499833, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("KneePitch")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[-0.0177907, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0177907, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0177907, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0177907, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[-0.415216, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.415216, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.415216, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.515034, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[-1.18969, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.18969, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.18969, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.22269, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[0.31471, [3, -0.333333, 0], [3, 0.333333, 0]], [0.31471, [3, -0.333333, 0], [3, 0.333333, 0]], [0.31471, [3, -0.333333, 0], [3, 0.333333, 0]], [0.595955, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[1.47401, [3, -0.333333, 0], [3, 0.333333, 0]], [1.47401, [3, -0.333333, 0], [3, 0.333333, 0]], [1.47401, [3, -0.333333, 0], [3, 0.333333, 0]], [1.55579, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[0.17869, [3, -0.333333, 0], [3, 0.333333, 0]], [0.17869, [3, -0.333333, 0], [3, 0.333333, 0]], [0.17869, [3, -0.333333, 0], [3, 0.333333, 0]], [0.145248, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[0.0998538, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0998538, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0998538, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00378421, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[0.466033, [3, -0.333333, 0], [3, 0.333333, 0]], [0.469357, [3, -0.333333, 0], [3, 0.333333, 0]], [0.469357, [3, -0.333333, 0], [3, 0.333333, 0]], [0.514808, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[1.2623, [3, -0.333333, 0], [3, 0.333333, 0]], [1.26392, [3, -0.333333, 0], [3, 0.333333, 0]], [1.26392, [3, -0.333333, 0], [3, 0.333333, 0]], [1.22978, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[0.02, [3, -0.333333, 0], [3, 0.333333, 0]], [0.979491, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0228069, [3, -0.333333, 0], [3, 0.333333, 0]], [0.591789, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[-0.456189, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.453388, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.453388, [3, -0.333333, 0], [3, 0.333333, 0]], [1.55025, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[-0.175158, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.182155, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.182155, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.14917, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.96, 1.96, 2.96, 3.96])
	keys.append([[-0.500374, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.49633, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.49633, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.00916602, [3, -0.333333, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Hello finished")
	except BaseException, err:
	  print err

def anim_rap():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing rap")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[-0.172626, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.172626, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.172626, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.172626, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.193583, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.00470202, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00470202, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00470202, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00470202, [3, -0.333333, 0], [3, 0.133333, 0]], [0.00470202, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[-0.422109, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.422109, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.422109, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.422109, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.512327, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[-1.21134, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.21134, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.21134, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.21134, [3, -0.333333, 0], [3, 0.133333, 0]], [-1.22276, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.298334, [3, -0.333333, 0], [3, 0.333333, 0]], [0.298334, [3, -0.333333, 0], [3, 0.333333, 0]], [0.298334, [3, -0.333333, 0], [3, 0.333333, 0]], [0.298334, [3, -0.333333, 0], [3, 0.133333, 0]], [0.591717, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[1.44533, [3, -0.333333, 0], [3, 0.333333, 0]], [1.44533, [3, -0.333333, 0], [3, 0.333333, 0]], [1.43492, [3, -0.333333, 0], [3, 0.333333, 0]], [1.43492, [3, -0.333333, 0], [3, 0.133333, 0]], [1.55176, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.21853, [3, -0.333333, 0], [3, 0.333333, 0]], [0.243477, [3, -0.333333, -0.00611825], [3, 0.333333, 0.00611825]], [0.255239, [3, -0.333333, 0], [3, 0.333333, 0]], [0.255239, [3, -0.333333, 0], [3, 0.133333, 0]], [0.157944, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.102496, [3, -0.333333, 0], [3, 0.333333, 0]], [0.102496, [3, -0.333333, 0], [3, 0.333333, 0]], [0.102496, [3, -0.333333, 0], [3, 0.333333, 0]], [0.102496, [3, -0.333333, 0], [3, 0.133333, 0]], [0.0108024, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[1.29273, [3, -0.333333, 0], [3, 0.333333, 0]], [1.3163, [3, -0.333333, 0], [3, 0.333333, 0]], [1.29151, [3, -0.333333, 0], [3, 0.333333, 0]], [1.31942, [3, -0.333333, 0], [3, 0.133333, 0]], [0.523965, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.103737, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0317125, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0773671, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.000225505, [3, -0.333333, 0], [3, 0.133333, 0]], [1.21945, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.639186, [3, -0.333333, 0], [3, 0.333333, 0]], [0.970327, [3, -0.333333, 0], [3, 0.333333, 0]], [0.970327, [3, -0.333333, 0], [3, 0.333333, 0]], [0.970327, [3, -0.333333, 0], [3, 0.133333, 0]], [0.610205, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.18215, [3, -0.333333, 0], [3, 0.333333, 0]], [0.248693, [3, -0.333333, 0], [3, 0.333333, 0]], [0.193019, [3, -0.333333, 0], [3, 0.333333, 0]], [0.367478, [3, -0.333333, -0.174459], [3, 0.133333, 0.0697837]], [1.54103, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[-0.163052, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.509183, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.188449, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.511894, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.161309, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.101012, [3, -0.333333, 0], [3, 0.333333, 0]], [0.101012, [3, -0.333333, 0], [3, 0.333333, 0]], [0.101012, [3, -0.333333, 0], [3, 0.333333, 0]], [0.101012, [3, -0.333333, 0], [3, 0.133333, 0]], [0.00330047, [3, -0.133333, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Rap finished")
	except BaseException, err:
	  print err

def anim_rap_post():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing rap")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[-0.172626, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.172626, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.172626, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.172626, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.193583, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.00470202, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00470202, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00470202, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00470202, [3, -0.333333, 0], [3, 0.133333, 0]], [0.00470202, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[-0.422109, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.422109, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.422109, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.422109, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.512327, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[-1.21134, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.21134, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.21134, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.21134, [3, -0.333333, 0], [3, 0.133333, 0]], [-1.22276, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.298334, [3, -0.333333, 0], [3, 0.333333, 0]], [0.298334, [3, -0.333333, 0], [3, 0.333333, 0]], [0.298334, [3, -0.333333, 0], [3, 0.333333, 0]], [0.298334, [3, -0.333333, 0], [3, 0.133333, 0]], [0.591717, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[1.44533, [3, -0.333333, 0], [3, 0.333333, 0]], [1.44533, [3, -0.333333, 0], [3, 0.333333, 0]], [1.43492, [3, -0.333333, 0], [3, 0.333333, 0]], [1.43492, [3, -0.333333, 0], [3, 0.133333, 0]], [1.55176, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.21853, [3, -0.333333, 0], [3, 0.333333, 0]], [0.243477, [3, -0.333333, -0.00611825], [3, 0.333333, 0.00611825]], [0.255239, [3, -0.333333, 0], [3, 0.333333, 0]], [0.255239, [3, -0.333333, 0], [3, 0.133333, 0]], [0.157944, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.102496, [3, -0.333333, 0], [3, 0.333333, 0]], [0.102496, [3, -0.333333, 0], [3, 0.333333, 0]], [0.102496, [3, -0.333333, 0], [3, 0.333333, 0]], [0.102496, [3, -0.333333, 0], [3, 0.133333, 0]], [0.0108024, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[1.29273, [3, -0.333333, 0], [3, 0.333333, 0]], [1.3163, [3, -0.333333, 0], [3, 0.333333, 0]], [1.29151, [3, -0.333333, 0], [3, 0.333333, 0]], [1.31942, [3, -0.333333, 0], [3, 0.133333, 0]], [0.523965, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.103737, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0317125, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0773671, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.000225505, [3, -0.333333, 0], [3, 0.133333, 0]], [1.21945, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.639186, [3, -0.333333, 0], [3, 0.333333, 0]], [0.970327, [3, -0.333333, 0], [3, 0.333333, 0]], [0.970327, [3, -0.333333, 0], [3, 0.333333, 0]], [0.970327, [3, -0.333333, 0], [3, 0.133333, 0]], [0.610205, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.18215, [3, -0.333333, 0], [3, 0.333333, 0]], [0.248693, [3, -0.333333, 0], [3, 0.333333, 0]], [0.193019, [3, -0.333333, 0], [3, 0.333333, 0]], [0.367478, [3, -0.333333, -0.174459], [3, 0.133333, 0.0697837]], [1.54103, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[-0.163052, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.509183, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.188449, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.511894, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.161309, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.96, 1.96, 2.96, 3.96, 4.36])
	keys.append([[0.101012, [3, -0.333333, 0], [3, 0.333333, 0]], [0.101012, [3, -0.333333, 0], [3, 0.333333, 0]], [0.101012, [3, -0.333333, 0], [3, 0.333333, 0]], [0.101012, [3, -0.333333, 0], [3, 0.133333, 0]], [0.00330047, [3, -0.133333, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.post.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Rap finished")
	except BaseException, err:
	  print err

def anim_handsOnHead():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing handsOnHead")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([2.96])
	keys.append([[-0.168975, [3, -1, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([2.96])
	keys.append([[0.0098265, [3, -1, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([2.96])
	keys.append([[-1.29878, [3, -1, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([2.96])
	keys.append([[-1.42089, [3, -1, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([2.96])
	keys.append([[0.0255373, [3, -1, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([2.96])
	keys.append([[-0.224612, [3, -1, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([2.96])
	keys.append([[0.770362, [3, -1, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([2.96])
	keys.append([[0.561879, [3, -1, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([2.96])
	keys.append([[1.4271, [3, -1, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([2.96])
	keys.append([[1.29136, [3, -1, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([2.96])
	keys.append([[0.02, [3, -1, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([2.96])
	keys.append([[-0.194531, [3, -1, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([2.96])
	keys.append([[-0.82189, [3, -1, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([2.96])
	keys.append([[0.510757, [3, -1, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished handsOnHead")
	except BaseException, err:
	  print err

def anim_handsDownFromHead():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing handsDownFromHead")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([1.96])
	keys.append([[-0.168975, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([1.96])
	keys.append([[0.0098265, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([1.96])
	keys.append([[-0.423361, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([1.96])
	keys.append([[-1.21168, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([1.96])
	keys.append([[0.298334, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([1.96])
	keys.append([[1.46936, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([1.96])
	keys.append([[0.185357, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([1.96])
	keys.append([[0.11272, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([1.96])
	keys.append([[0.421102, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([1.96])
	keys.append([[1.20641, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([1.96])
	keys.append([[0.298334, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([1.96])
	keys.append([[1.46175, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([1.96])
	keys.append([[-0.179405, [3, -0.666667, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([1.96])
	keys.append([[0.111716, [3, -0.666667, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished handsDownFromHead")
	except BaseException, err:
	  print err

def anim_cough():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing cough")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([1.36])
	keys.append([[-0.158223, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([1.36])
	keys.append([[-0.00437883, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([1.36])
	keys.append([[-0.433384, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([1.36])
	keys.append([[-1.21117, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([1.36])
	keys.append([[1.42629, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([1.36])
	keys.append([[0.234803, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([1.36])
	keys.append([[1.50118, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([1.36])
	keys.append([[0.491585, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([1.36])
	keys.append([[0.0234105, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([1.36])
	keys.append([[-0.0456845, [3, -0.466667, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished cough")
	except BaseException, err:
	  print err

def anim_downFromCough():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing downFromCough")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([1.36])
	keys.append([[-0.158223, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([1.36])
	keys.append([[-0.00437883, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([1.36])
	keys.append([[-0.422109, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([1.36])
	keys.append([[-1.20105, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([1.36])
	keys.append([[1.44851, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([1.36])
	keys.append([[0.22112, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([1.36])
	keys.append([[0.427495, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([1.36])
	keys.append([[1.18057, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([1.36])
	keys.append([[1.45367, [3, -0.466667, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([1.36])
	keys.append([[-0.19569, [3, -0.466667, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished downFromCough")
	except BaseException, err:
	  print err

def anim_singingMovingHead():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing singingMovingHead")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.36, 0.76, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.56, 3.96, 4.36, 4.76, 5.16, 5.56, 5.96, 6.36, 6.76, 7.16, 7.56])
	keys.append([[-0.40345, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.112105, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.348939, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.201818, [3, -0.133333, -0.0512843], [3, 0.133333, 0.0512843]], [-0.0412338, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.228973, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0352195, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.279414, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.098789, [3, -0.133333, -0.0574685], [3, 0.133333, 0.0574685]], [0.0653972, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.251672, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0898396, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.104542, [3, -0.133333, 0], [3, 0.133333, 0]], [0.117435, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0855053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0558644, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.161807, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0126352, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.172626, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.36, 0.76, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.56, 3.96, 4.36, 4.76, 5.16, 5.56, 5.96, 6.36, 6.76, 7.16, 7.56])
	keys.append([[-0.00437883, [3, -0.133333, 0], [3, 0.133333, 0]], [0.131331, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0180773, [3, -0.133333, 0.0343486], [3, 0.133333, -0.0343486]], [-0.0747602, [3, -0.133333, 0], [3, 0.133333, 0]], [0.142773, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.29545, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0400219, [3, -0.133333, -0.0768528], [3, 0.133333, 0.0768528]], [0.165667, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.139809, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0820006, [3, -0.133333, -0.0612508], [3, 0.133333, 0.0612508]], [0.227696, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0492191, [3, -0.133333, 0], [3, 0.133333, 0]], [0.134562, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.265522, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0168842, [3, -0.133333, -0.0529479], [3, 0.133333, 0.0529479]], [0.0698321, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.167735, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0501002, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00470202, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.36, 0.76, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.56, 3.96, 4.36, 4.76, 5.16, 5.56, 5.96, 6.36, 6.76, 7.16, 7.56])
	keys.append([[-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.422109, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.36, 0.76, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.56, 3.96, 4.36, 4.76, 5.16, 5.56, 5.96, 6.36, 6.76, 7.16, 7.56])
	keys.append([[-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21134, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.36, 0.76, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.56, 3.96, 4.36, 4.76, 5.16, 5.56, 5.96, 6.36, 6.76, 7.16, 7.56])
	keys.append([[1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4133, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42348, [3, -0.133333, -0.00366233], [3, 0.133333, 0.00366233]], [1.43527, [3, -0.133333, -0.00364116], [3, 0.133333, 0.00364116]], [1.44533, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.36, 0.76, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.56, 3.96, 4.36, 4.76, 5.16, 5.56, 5.96, 6.36, 6.76, 7.16, 7.56])
	keys.append([[0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.264053, [3, -0.133333, 0], [3, 0.133333, 0]], [0.253432, [3, -0.133333, 0.00560205], [3, 0.133333, -0.00560205]], [0.230441, [3, -0.133333, 0.00581703], [3, 0.133333, -0.00581703]], [0.21853, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.36, 0.76, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.56, 3.96, 4.36, 4.76, 5.16, 5.56, 5.96, 6.36, 6.76, 7.16, 7.56])
	keys.append([[0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.427495, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.36, 0.76, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.56, 3.96, 4.36, 4.76, 5.16, 5.56, 5.96, 6.36, 6.76, 7.16, 7.56])
	keys.append([[1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0.133333, 0]], [1.19121, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.36, 0.76, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.56, 3.96, 4.36, 4.76, 5.16, 5.56, 5.96, 6.36, 6.76, 7.16, 7.56])
	keys.append([[1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42184, [3, -0.133333, 0], [3, 0.133333, 0]], [1.4328, [3, -0.133333, -0.00407284], [3, 0.133333, 0.00407284]], [1.44628, [3, -0.133333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.36, 0.76, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.56, 3.96, 4.36, 4.76, 5.16, 5.56, 5.96, 6.36, 6.76, 7.16, 7.56])
	keys.append([[-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.247339, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.237239, [3, -0.133333, -0.00375379], [3, 0.133333, 0.00375379]], [-0.224816, [3, -0.133333, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished singingMovingHead")
	except BaseException, err:
	  print err

def anim_subEnglish():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing subEnglish")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[-0.16944, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.16944, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[-0.00245538, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.00245538, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[-0.426646, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.426646, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.426646, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.426646, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.426646, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.426646, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.416133, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[-1.20852, [3, -0.333333, 0], [3, 0.133333, 0]], [-1.20852, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.20852, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.20852, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.20852, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.20852, [3, -0.133333, 0], [3, 0.333333, 0]], [-1.19765, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.300448, [3, -0.333333, 0], [3, 0.133333, 0]], [0.300448, [3, -0.133333, 0], [3, 0.133333, 0]], [0.300448, [3, -0.133333, 0], [3, 0.133333, 0]], [0.300448, [3, -0.133333, 0], [3, 0.133333, 0]], [0.300448, [3, -0.133333, 0], [3, 0.133333, 0]], [0.300448, [3, -0.133333, 0], [3, 0.333333, 0]], [0.300448, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[1.43216, [3, -0.333333, 0], [3, 0.133333, 0]], [1.43216, [3, -0.133333, 0], [3, 0.133333, 0]], [1.43216, [3, -0.133333, 0], [3, 0.133333, 0]], [1.43216, [3, -0.133333, 0], [3, 0.133333, 0]], [1.43216, [3, -0.133333, 0], [3, 0.133333, 0]], [1.43216, [3, -0.133333, 0], [3, 0.333333, 0]], [1.46786, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.237611, [3, -0.333333, 0], [3, 0.133333, 0]], [0.237611, [3, -0.133333, 0], [3, 0.133333, 0]], [0.237611, [3, -0.133333, 0], [3, 0.133333, 0]], [0.237611, [3, -0.133333, 0], [3, 0.133333, 0]], [0.237611, [3, -0.133333, 0], [3, 0.133333, 0]], [0.237611, [3, -0.133333, 0], [3, 0.333333, 0]], [0.202551, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.0907263, [3, -0.333333, 0], [3, 0.133333, 0]], [0.0907263, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0907263, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0907263, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0907263, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0907263, [3, -0.133333, 0], [3, 0.333333, 0]], [0.0907263, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.734036, [3, -0.333333, 0], [3, 0.133333, 0]], [0.534621, [3, -0.133333, 0], [3, 0.133333, 0]], [0.855875, [3, -0.133333, 0], [3, 0.133333, 0]], [0.655313, [3, -0.133333, 0], [3, 0.133333, 0]], [0.801485, [3, -0.133333, 0], [3, 0.133333, 0]], [0.611632, [3, -0.133333, 0.0364508], [3, 0.333333, -0.091127]], [0.418752, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.0122637, [3, -0.333333, 0], [3, 0.133333, 0]], [0.00203796, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0129279, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0016785, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0016785, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0016785, [3, -0.133333, 0], [3, 0.333333, 0]], [1.18951, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.302463, [3, -0.333333, 0], [3, 0.133333, 0]], [0.302463, [3, -0.133333, 0], [3, 0.133333, 0]], [0.302463, [3, -0.133333, 0], [3, 0.133333, 0]], [0.302463, [3, -0.133333, 0], [3, 0.133333, 0]], [0.302463, [3, -0.133333, 0], [3, 0.133333, 0]], [0.302463, [3, -0.133333, 0], [3, 0.333333, 0]], [0.302463, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.245521, [3, -0.333333, 0], [3, 0.133333, 0]], [0.281616, [3, -0.133333, 0], [3, 0.133333, 0]], [0.204742, [3, -0.133333, 0], [3, 0.133333, 0]], [0.279196, [3, -0.133333, 0], [3, 0.133333, 0]], [0.224928, [3, -0.133333, 0], [3, 0.133333, 0]], [0.276483, [3, -0.133333, -0.0515557], [3, 0.333333, 0.128889]], [1.45986, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[-0.0121192, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.0121192, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0121192, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0121192, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0121192, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0121192, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.179218, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.0999008, [3, -0.333333, 0], [3, 0.133333, 0]], [0.0999008, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0999008, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0999008, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0999008, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0999008, [3, -0.133333, 0], [3, 0.333333, 0]], [0.0999008, [3, -0.333333, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished subEnglish")
	except BaseException, err:
	  print err

def anim_typing():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing typing")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[-0.16944, [3, -0.333333, 0], [3, 0.2, 0]], [-0.16944, [3, -0.2, 0], [3, 0.106667, 0]], [-0.16944, [3, -0.106667, 0], [3, 0.0933333, 0]], [-0.16944, [3, -0.0933333, 0], [3, 0.106667, 0]], [-0.16944, [3, -0.106667, 0], [3, 0.0933333, 0]], [-0.16944, [3, -0.0933333, 0], [3, 0.146667, 0]], [-0.16944, [3, -0.146667, 0], [3, 0.0533333, 0]], [-0.16944, [3, -0.0533333, 0], [3, 0.2, 0]], [-0.16944, [3, -0.2, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[-0.00245538, [3, -0.333333, 0], [3, 0.2, 0]], [-0.00245538, [3, -0.2, 0], [3, 0.106667, 0]], [-0.00245538, [3, -0.106667, 0], [3, 0.0933333, 0]], [-0.00245538, [3, -0.0933333, 0], [3, 0.106667, 0]], [-0.00245538, [3, -0.106667, 0], [3, 0.0933333, 0]], [-0.00245538, [3, -0.0933333, 0], [3, 0.146667, 0]], [-0.00245538, [3, -0.146667, 0], [3, 0.0533333, 0]], [-0.00245538, [3, -0.0533333, 0], [3, 0.2, 0]], [-0.00245538, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[-0.416133, [3, -0.333333, 0], [3, 0.2, 0]], [-0.416133, [3, -0.2, 0], [3, 0.106667, 0]], [-0.416133, [3, -0.106667, 0], [3, 0.0933333, 0]], [-0.416133, [3, -0.0933333, 0], [3, 0.106667, 0]], [-0.416133, [3, -0.106667, 0], [3, 0.0933333, 0]], [-0.416133, [3, -0.0933333, 0], [3, 0.146667, 0]], [-0.416133, [3, -0.146667, 0], [3, 0.0533333, 0]], [-0.416133, [3, -0.0533333, 0], [3, 0.2, 0]], [-0.416133, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[-1.1768, [3, -0.333333, 0], [3, 0.2, 0]], [-1.1768, [3, -0.2, 0], [3, 0.106667, 0]], [-1.1768, [3, -0.106667, 0], [3, 0.0933333, 0]], [-1.1768, [3, -0.0933333, 0], [3, 0.106667, 0]], [-1.1768, [3, -0.106667, 0], [3, 0.0933333, 0]], [-1.1768, [3, -0.0933333, 0], [3, 0.146667, 0]], [-1.1768, [3, -0.146667, 0], [3, 0.0533333, 0]], [-1.1768, [3, -0.0533333, 0], [3, 0.2, 0]], [-1.18695, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[0.300448, [3, -0.333333, 0], [3, 0.2, 0]], [0.971374, [3, -0.2, 0], [3, 0.106667, 0]], [0.451955, [3, -0.106667, 0.168002], [3, 0.0933333, -0.147002]], [0.0263619, [3, -0.0933333, 0], [3, 0.106667, 0]], [0.541978, [3, -0.106667, -0.169316], [3, 0.0933333, 0.148152]], [0.978765, [3, -0.0933333, 0], [3, 0.146667, 0]], [0.179017, [3, -0.146667, 0.233097], [3, 0.0533333, -0.0847626]], [0.0251856, [3, -0.0533333, 0], [3, 0.2, 0]], [0.287518, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[0.158046, [3, -0.333333, 0], [3, 0.2, 0]], [0.158046, [3, -0.2, 0], [3, 0.106667, 0]], [0.147989, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.147989, [3, -0.0933333, 0], [3, 0.106667, 0]], [0.147989, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.147989, [3, -0.0933333, 0], [3, 0.146667, 0]], [0.147989, [3, -0.146667, 0], [3, 0.0533333, 0]], [0.287761, [3, -0.0533333, -0.0923192], [3, 0.2, 0.346197]], [1.46354, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[0.535203, [3, -0.333333, 0], [3, 0.2, 0]], [0.468564, [3, -0.2, 0.0192527], [3, 0.106667, -0.0102681]], [0.446641, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.496197, [3, -0.0933333, -0.0180545], [3, 0.106667, 0.0206337]], [0.562705, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.465292, [3, -0.0933333, 0.0427859], [3, 0.146667, -0.067235]], [0.232642, [3, -0.146667, 0.0625662], [3, 0.0533333, -0.0227513]], [0.209339, [3, -0.0533333, 0.00321308], [3, 0.2, -0.012049]], [0.186856, [3, -0.2, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[0.921678, [3, -0.333333, 0], [3, 0.2, 0]], [0.921678, [3, -0.2, 0], [3, 0.106667, 0]], [0.921678, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.921678, [3, -0.0933333, 0], [3, 0.106667, 0]], [0.921678, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.921678, [3, -0.0933333, 0], [3, 0.146667, 0]], [0.921678, [3, -0.146667, 0], [3, 0.0533333, 0]], [0.831842, [3, -0.0533333, 0.0574456], [3, 0.2, -0.215421]], [0.103078, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[0.418752, [3, -0.333333, 0], [3, 0.2, 0]], [0.418752, [3, -0.2, 0], [3, 0.106667, 0]], [0.418752, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.418752, [3, -0.0933333, 0], [3, 0.106667, 0]], [0.418752, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.418752, [3, -0.0933333, 0], [3, 0.146667, 0]], [0.418752, [3, -0.146667, 0], [3, 0.0533333, 0]], [0.418752, [3, -0.0533333, 0], [3, 0.2, 0]], [0.418752, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[1.17817, [3, -0.333333, 0], [3, 0.2, 0]], [1.17817, [3, -0.2, 0], [3, 0.106667, 0]], [1.17817, [3, -0.106667, 0], [3, 0.0933333, 0]], [1.17817, [3, -0.0933333, 0], [3, 0.106667, 0]], [1.17817, [3, -0.106667, 0], [3, 0.0933333, 0]], [1.17817, [3, -0.0933333, 0], [3, 0.146667, 0]], [1.17817, [3, -0.146667, 0], [3, 0.0533333, 0]], [1.17817, [3, -0.0533333, 0], [3, 0.2, 0]], [1.18837, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[0.302463, [3, -0.333333, 0], [3, 0.2, 0]], [0.98, [3, -0.2, 0], [3, 0.106667, 0]], [0.452155, [3, -0.106667, 0.170667], [3, 0.0933333, -0.149333]], [0.02, [3, -0.0933333, 0], [3, 0.106667, 0]], [0.541764, [3, -0.106667, -0.170667], [3, 0.0933333, 0.149333]], [0.98, [3, -0.0933333, 0], [3, 0.146667, 0]], [0.179136, [3, -0.146667, 0.234667], [3, 0.0533333, -0.0853333]], [0.02, [3, -0.0533333, 0], [3, 0.2, 0]], [0.287504, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[0.15788, [3, -0.333333, 0], [3, 0.2, 0]], [0.15788, [3, -0.2, 0], [3, 0.106667, 0]], [0.147509, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.147509, [3, -0.0933333, 0], [3, 0.106667, 0]], [0.147509, [3, -0.106667, 0], [3, 0.0933333, 0]], [0.147509, [3, -0.0933333, 0], [3, 0.146667, 0]], [0.147509, [3, -0.146667, 0], [3, 0.0533333, 0]], [0.287366, [3, -0.0533333, -0.0923495], [3, 0.2, 0.346311]], [1.46349, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[-0.535195, [3, -0.333333, 0], [3, 0.2, 0]], [-0.468562, [3, -0.2, -0.0192511], [3, 0.106667, 0.0102673]], [-0.44664, [3, -0.106667, 0], [3, 0.0933333, 0]], [-0.496197, [3, -0.0933333, 0.0180546], [3, 0.106667, -0.0206338]], [-0.562705, [3, -0.106667, 0], [3, 0.0933333, 0]], [-0.465292, [3, -0.0933333, -0.0427859], [3, 0.146667, 0.067235]], [-0.232643, [3, -0.146667, -0.0625661], [3, 0.0533333, 0.0227513]], [-0.209339, [3, -0.0533333, -0.0032131], [3, 0.2, 0.0120491]], [-0.186856, [3, -0.2, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.96, 1.56, 1.88, 2.16, 2.48, 2.76, 3.2, 3.36, 3.96])
	keys.append([[-0.919634, [3, -0.333333, 0], [3, 0.2, 0]], [-0.919634, [3, -0.2, 0], [3, 0.106667, 0]], [-0.930014, [3, -0.106667, 0], [3, 0.0933333, 0]], [-0.930014, [3, -0.0933333, 0], [3, 0.106667, 0]], [-0.930014, [3, -0.106667, 0], [3, 0.0933333, 0]], [-0.930014, [3, -0.0933333, 0], [3, 0.146667, 0]], [-0.930014, [3, -0.146667, 0], [3, 0.0533333, 0]], [-0.817215, [3, -0.0533333, -0.0717655], [3, 0.2, 0.26912]], [0.0926433, [3, -0.2, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished typing")
	except BaseException, err:
	  print err

def anim_fly():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing fly")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[-0.16944, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.16944, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.16944, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[-0.00245538, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.00245538, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[-0.405831, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.405831, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[-1.18695, [3, -0.333333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.333333, 0]], [-1.18695, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.299046, [3, -0.333333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.333333, 0]], [0.299046, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[1.51473, [3, -0.333333, 0], [3, 0.133333, 0]], [1.51473, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51473, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51473, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51473, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51473, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51473, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51473, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51473, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51473, [3, -0.133333, 0], [3, 0.333333, 0]], [1.47853, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.974361, [3, -0.333333, 0], [3, 0.133333, 0]], [1.32447, [3, -0.133333, 0], [3, 0.133333, 0]], [1.05206, [3, -0.133333, 0], [3, 0.133333, 0]], [1.32472, [3, -0.133333, 0], [3, 0.133333, 0]], [1.06508, [3, -0.133333, 0], [3, 0.133333, 0]], [1.31449, [3, -0.133333, 0], [3, 0.133333, 0]], [1.07216, [3, -0.133333, 0], [3, 0.133333, 0]], [1.32078, [3, -0.133333, 0], [3, 0.133333, 0]], [1.12573, [3, -0.133333, 0], [3, 0.133333, 0]], [1.32102, [3, -0.133333, 0], [3, 0.333333, 0]], [0.200251, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.103078, [3, -0.333333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.333333, 0]], [0.103078, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.407023, [3, -0.333333, 0], [3, 0.133333, 0]], [0.407023, [3, -0.133333, 0], [3, 0.133333, 0]], [0.407023, [3, -0.133333, 0], [3, 0.133333, 0]], [0.407023, [3, -0.133333, 0], [3, 0.133333, 0]], [0.407023, [3, -0.133333, 0], [3, 0.133333, 0]], [0.407023, [3, -0.133333, 0], [3, 0.133333, 0]], [0.407023, [3, -0.133333, 0], [3, 0.133333, 0]], [0.407023, [3, -0.133333, 0], [3, 0.133333, 0]], [0.407023, [3, -0.133333, 0], [3, 0.133333, 0]], [0.407023, [3, -0.133333, 0], [3, 0.333333, 0]], [0.407023, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[1.18837, [3, -0.333333, 0], [3, 0.133333, 0]], [1.18837, [3, -0.133333, 0], [3, 0.133333, 0]], [1.18837, [3, -0.133333, 0], [3, 0.133333, 0]], [1.18837, [3, -0.133333, 0], [3, 0.133333, 0]], [1.18837, [3, -0.133333, 0], [3, 0.133333, 0]], [1.18837, [3, -0.133333, 0], [3, 0.133333, 0]], [1.18837, [3, -0.133333, 0], [3, 0.133333, 0]], [1.18837, [3, -0.133333, 0], [3, 0.133333, 0]], [1.18837, [3, -0.133333, 0], [3, 0.133333, 0]], [1.18837, [3, -0.133333, 0], [3, 0.333333, 0]], [1.18837, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.287504, [3, -0.333333, 0], [3, 0.133333, 0]], [0.287504, [3, -0.133333, 0], [3, 0.133333, 0]], [0.287504, [3, -0.133333, 0], [3, 0.133333, 0]], [0.287504, [3, -0.133333, 0], [3, 0.133333, 0]], [0.287504, [3, -0.133333, 0], [3, 0.133333, 0]], [0.287504, [3, -0.133333, 0], [3, 0.133333, 0]], [0.287504, [3, -0.133333, 0], [3, 0.133333, 0]], [0.287504, [3, -0.133333, 0], [3, 0.133333, 0]], [0.287504, [3, -0.133333, 0], [3, 0.133333, 0]], [0.287504, [3, -0.133333, 0], [3, 0.333333, 0]], [0.287504, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[1.51144, [3, -0.333333, 0], [3, 0.133333, 0]], [1.51144, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51144, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51144, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51144, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51144, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51144, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51144, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51144, [3, -0.133333, 0], [3, 0.133333, 0]], [1.51144, [3, -0.133333, 0], [3, 0.333333, 0]], [1.47865, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[-0.973828, [3, -0.333333, 0], [3, 0.133333, 0]], [-1.32443, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.05205, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.32472, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.06508, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.31449, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.07216, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.32078, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.12573, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.32102, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.200144, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.0926433, [3, -0.333333, 0], [3, 0.133333, 0]], [0.0926433, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0926433, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0926433, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0926433, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0926433, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0926433, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0926433, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0926433, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0926433, [3, -0.133333, 0], [3, 0.333333, 0]], [0.0926433, [3, -0.333333, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished fly")
	except BaseException, err:
	  print err


def anim_laugh():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing laugh")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.517815, [3, -0.333333, 0], [3, 0.133333, 0]], [0.156772, [3, -0.133333, 0], [3, 0.133333, 0]], [0.510059, [3, -0.133333, 0], [3, 0.133333, 0]], [0.153414, [3, -0.133333, 0], [3, 0.133333, 0]], [0.507008, [3, -0.133333, 0], [3, 0.133333, 0]], [0.158008, [3, -0.133333, 0.0642381], [3, 0.333333, -0.160595]], [-0.167492, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[-0.00245538, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.00266245, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LAnklePitch")
	times.append([3.96])
	keys.append([[0.0829351, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("LAnkleRoll")
	times.append([3.96])
	keys.append([[-0.129935, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[-0.405831, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.405248, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[-1.18695, [3, -0.333333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.333333, 0]], [-1.18976, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.299046, [3, -0.333333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.333333, 0]], [0.3, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LHipPitch")
	times.append([3.96])
	keys.append([[0.129771, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("LHipRoll")
	times.append([3.96])
	keys.append([[0.0987848, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("LHipYawPitch")
	times.append([3.96])
	keys.append([[-0.167994, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("LKneePitch")
	times.append([3.96])
	keys.append([[-0.0895419, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[1.44555, [3, -0.333333, 0], [3, 0.133333, 0]], [1.44555, [3, -0.133333, 0], [3, 0.133333, 0]], [1.44555, [3, -0.133333, 0], [3, 0.133333, 0]], [1.44555, [3, -0.133333, 0], [3, 0.133333, 0]], [1.44555, [3, -0.133333, 0], [3, 0.133333, 0]], [1.44555, [3, -0.133333, 0], [3, 0.333333, 0]], [1.46518, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.25027, [3, -0.333333, 0], [3, 0.133333, 0]], [0.25027, [3, -0.133333, 0], [3, 0.133333, 0]], [0.25027, [3, -0.133333, 0], [3, 0.133333, 0]], [0.25027, [3, -0.133333, 0], [3, 0.133333, 0]], [0.25027, [3, -0.133333, 0], [3, 0.133333, 0]], [0.25027, [3, -0.133333, 0], [3, 0.333333, 0]], [0.19097, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.103078, [3, -0.333333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.333333, 0]], [0.102314, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RAnklePitch")
	times.append([3.96])
	keys.append([[0.0829351, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("RAnkleRoll")
	times.append([3.96])
	keys.append([[0.121906, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[1.32878, [3, -0.333333, 0], [3, 0.133333, 0]], [1.25072, [3, -0.133333, 0], [3, 0.133333, 0]], [1.33883, [3, -0.133333, 0], [3, 0.133333, 0]], [1.32502, [3, -0.133333, 0], [3, 0.133333, 0]], [1.33736, [3, -0.133333, 0], [3, 0.133333, 0]], [1.31508, [3, -0.133333, 0.0222831], [3, 0.333333, -0.0557077]], [0.412997, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.243703, [3, -0.333333, 0], [3, 0.133333, 0]], [0.201353, [3, -0.133333, 0], [3, 0.133333, 0]], [0.245049, [3, -0.133333, 0], [3, 0.133333, 0]], [0.16401, [3, -0.133333, 0], [3, 0.133333, 0]], [0.236302, [3, -0.133333, 0], [3, 0.133333, 0]], [0.155784, [3, -0.133333, 0], [3, 0.333333, 0]], [1.1921, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.502605, [3, -0.333333, 0], [3, 0.133333, 0]], [0.502605, [3, -0.133333, 0], [3, 0.133333, 0]], [0.502605, [3, -0.133333, 0], [3, 0.133333, 0]], [0.502605, [3, -0.133333, 0], [3, 0.133333, 0]], [0.502605, [3, -0.133333, 0], [3, 0.133333, 0]], [0.502605, [3, -0.133333, 0], [3, 0.333333, 0]], [0.30947, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RHipPitch")
	times.append([3.96])
	keys.append([[0.129771, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("RHipRoll")
	times.append([3.96])
	keys.append([[-0.0988553, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("RHipYawPitch")
	times.append([3.96])
	keys.append([[-0.167994, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("RKneePitch")
	times.append([3.96])
	keys.append([[-0.0895419, [3, -1.33333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.990671, [3, -0.333333, 0], [3, 0.133333, 0]], [0.925464, [3, -0.133333, 0], [3, 0.133333, 0]], [0.987616, [3, -0.133333, 0], [3, 0.133333, 0]], [0.873062, [3, -0.133333, 0], [3, 0.133333, 0]], [0.983951, [3, -0.133333, 0], [3, 0.133333, 0]], [0.870312, [3, -0.133333, 0], [3, 0.333333, 0]], [1.46513, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[-0.470026, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.349168, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.458853, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.458853, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.458853, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.448484, [3, -0.133333, -0.0103691], [3, 0.333333, 0.0259226]], [-0.181437, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.96, 1.36, 1.76, 2.16, 2.56, 2.96, 3.96])
	keys.append([[0.611497, [3, -0.333333, 0], [3, 0.133333, 0]], [0.60075, [3, -0.133333, 0], [3, 0.133333, 0]], [0.60075, [3, -0.133333, 0], [3, 0.133333, 0]], [0.60075, [3, -0.133333, 0], [3, 0.133333, 0]], [0.60075, [3, -0.133333, 0], [3, 0.133333, 0]], [0.60075, [3, -0.133333, 0], [3, 0.333333, 0]], [0.100403, [3, -0.333333, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished laugh")
	except BaseException, err:
	  print err

def anim_whipNaeNae():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing whipNaeNae")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[-0.163886, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.163886, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.163886, [3, -0.133333, 0], [3, 0.2, 0]], [-0.163886, [3, -0.2, 0], [3, 0.2, 0]], [-0.163886, [3, -0.2, 0], [3, 0.133333, 0]], [-0.163886, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.163886, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.163886, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.163886, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.163886, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[-0.00245538, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.2, 0]], [-0.00245538, [3, -0.2, 0], [3, 0.2, 0]], [-0.00245538, [3, -0.2, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00245538, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.00245538, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[-0.405831, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.2, 0]], [-0.405831, [3, -0.2, 0], [3, 0.2, 0]], [-0.405831, [3, -0.2, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.405831, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.405831, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[-1.18695, [3, -0.333333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.2, 0]], [-1.18695, [3, -0.2, 0], [3, 0.2, 0]], [-1.18695, [3, -0.2, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.18695, [3, -0.133333, 0], [3, 0.333333, 0]], [-1.18695, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.299046, [3, -0.333333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.2, 0]], [0.299046, [3, -0.2, 0], [3, 0.2, 0]], [0.299046, [3, -0.2, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.133333, 0]], [0.299046, [3, -0.133333, 0], [3, 0.333333, 0]], [0.299046, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[1.44555, [3, -0.333333, 0], [3, 0.133333, 0]], [1.44555, [3, -0.133333, 0], [3, 0.133333, 0]], [1.44555, [3, -0.133333, 0], [3, 0.2, 0]], [1.43358, [3, -0.2, 0.00366837], [3, 0.2, -0.00366837]], [1.42354, [3, -0.2, 0.00406313], [3, 0.133333, -0.00270875]], [1.41326, [3, -0.133333, 0], [3, 0.133333, 0]], [1.41326, [3, -0.133333, 0], [3, 0.133333, 0]], [1.41326, [3, -0.133333, 0], [3, 0.133333, 0]], [1.41326, [3, -0.133333, 0], [3, 0.333333, 0]], [1.46371, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.25027, [3, -0.333333, 0], [3, 0.133333, 0]], [0.25027, [3, -0.133333, 0], [3, 0.133333, 0]], [0.25027, [3, -0.133333, 0], [3, 0.2, 0]], [0.260843, [3, -0.2, -0.0034636], [3, 0.2, 0.0034636]], [0.271051, [3, -0.2, 0], [3, 0.133333, 0]], [0.271051, [3, -0.133333, 0], [3, 0.133333, 0]], [0.271051, [3, -0.133333, 0], [3, 0.133333, 0]], [0.271051, [3, -0.133333, 0], [3, 0.133333, 0]], [0.271051, [3, -0.133333, 0], [3, 0.333333, 0]], [0.18796, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.103078, [3, -0.333333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.2, 0]], [0.103078, [3, -0.2, 0], [3, 0.2, 0]], [0.103078, [3, -0.2, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.133333, 0]], [0.103078, [3, -0.133333, 0], [3, 0.333333, 0]], [0.103078, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[1.53532, [3, -0.333333, 0], [3, 0.133333, 0]], [1.53532, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0455557, [3, -0.133333, 0], [3, 0.2, 0]], [0.0455557, [3, -0.2, 0], [3, 0.2, 0]], [0.130506, [3, -0.2, -0.0849506], [3, 0.133333, 0.0566337]], [0.624962, [3, -0.133333, 0], [3, 0.133333, 0]], [0.142696, [3, -0.133333, 0], [3, 0.133333, 0]], [0.613923, [3, -0.133333, 0], [3, 0.133333, 0]], [0.138121, [3, -0.133333, 0], [3, 0.333333, 0]], [0.413313, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[1.21525, [3, -0.333333, 0], [3, 0.133333, 0]], [1.22627, [3, -0.133333, 0], [3, 0.133333, 0]], [1.22419, [3, -0.133333, 0.00208219], [3, 0.2, -0.00312329]], [1.20677, [3, -0.2, 0.0174132], [3, 0.2, -0.0174132]], [-0.0129539, [3, -0.2, 0], [3, 0.133333, 0]], [-0.0129539, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0129539, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0129539, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0129539, [3, -0.133333, 0], [3, 0.333333, 0]], [1.1883, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.303542, [3, -0.333333, 0], [3, 0.133333, 0]], [0.303542, [3, -0.133333, 0], [3, 0.133333, 0]], [0.303542, [3, -0.133333, 0], [3, 0.2, 0]], [0.303542, [3, -0.2, 0], [3, 0.2, 0]], [0.98, [3, -0.2, 0], [3, 0.133333, 0]], [0.98, [3, -0.133333, 0], [3, 0.133333, 0]], [0.98, [3, -0.133333, 0], [3, 0.133333, 0]], [0.98, [3, -0.133333, 0], [3, 0.133333, 0]], [0.98, [3, -0.133333, 0], [3, 0.333333, 0]], [0.300242, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.61355, [3, -0.333333, 0], [3, 0.133333, 0]], [0.601515, [3, -0.133333, 0.0120341], [3, 0.133333, -0.0120341]], [0.140071, [3, -0.133333, 0], [3, 0.2, 0]], [0.140071, [3, -0.2, 0], [3, 0.2, 0]], [-0.973066, [3, -0.2, 0], [3, 0.133333, 0]], [-0.962902, [3, -0.133333, -0.0034895], [3, 0.133333, 0.0034895]], [-0.952129, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.952129, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.952129, [3, -0.133333, 0], [3, 0.333333, 0]], [1.46703, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[-0.0833972, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.0724139, [3, -0.133333, -0.0109834], [3, 0.133333, 0.0109834]], [-0.0106403, [3, -0.133333, 0], [3, 0.2, 0]], [-0.0106403, [3, -0.2, 0], [3, 0.2, 0]], [-0.0106403, [3, -0.2, 0], [3, 0.133333, 0]], [-0.0757675, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00980758, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0916554, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0179095, [3, -0.133333, 0], [3, 0.333333, 0]], [-0.174657, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.96, 1.36, 1.76, 2.36, 2.96, 3.36, 3.76, 4.16, 4.56, 5.56])
	keys.append([[0.0938823, [3, -0.333333, 0], [3, 0.133333, 0]], [0.0938823, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0938823, [3, -0.133333, 0], [3, 0.2, 0]], [0.0938823, [3, -0.2, 0], [3, 0.2, 0]], [0.0938823, [3, -0.2, 0], [3, 0.133333, 0]], [0.0938823, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0938823, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0938823, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0938823, [3, -0.133333, 0], [3, 0.333333, 0]], [0.0938823, [3, -0.333333, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: whipNaeNae finished")
	except BaseException, err:
	  print err

def anim_squat():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing squat")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[-0.166798, [3, -0.466667, 0], [3, 0.333333, 0]], [-0.199545, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.176435, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.199531, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[-0.00245538, [3, -0.466667, 0], [3, 0.333333, 0]], [-0.00245538, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.00245538, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.00245538, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HipPitch")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[-0.749223, [3, -0.466667, 0], [3, 0.333333, 0]], [-0.0459852, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.739198, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.045918, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HipRoll")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[-0.0114811, [3, -0.466667, 0], [3, 0.333333, 0]], [-0.00130788, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.00134164, [3, -0.333333, 1.54755e-05], [3, 0.333333, -1.54755e-05]], [-0.00140073, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("KneePitch")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[0.43969, [3, -0.466667, 0], [3, 0.333333, 0]], [-0.0101191, [3, -0.333333, 0], [3, 0.333333, 0]], [0.436877, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.00984243, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[-0.413435, [3, -0.466667, 0], [3, 0.333333, 0]], [-0.521904, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.412589, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.519024, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[-1.19598, [3, -0.466667, 0], [3, 0.333333, 0]], [-1.22688, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.20352, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.22553, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[0.300231, [3, -0.466667, 0], [3, 0.333333, 0]], [0.598084, [3, -0.333333, 0], [3, 0.333333, 0]], [0.302215, [3, -0.333333, 0], [3, 0.333333, 0]], [0.598026, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[0.140749, [3, -0.466667, 0], [3, 0.333333, 0]], [1.552, [3, -0.333333, 0], [3, 0.333333, 0]], [0.145407, [3, -0.333333, 0], [3, 0.333333, 0]], [1.55434, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[0.182722, [3, -0.466667, 0], [3, 0.333333, 0]], [0.14962, [3, -0.333333, 0], [3, 0.333333, 0]], [0.173958, [3, -0.333333, 0], [3, 0.333333, 0]], [0.143721, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[0.0910805, [3, -0.466667, 0], [3, 0.333333, 0]], [0.00276403, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0907322, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.000247908, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[0.413427, [3, -0.466667, 0], [3, 0.333333, 0]], [0.521918, [3, -0.333333, 0], [3, 0.333333, 0]], [0.412585, [3, -0.333333, 0], [3, 0.333333, 0]], [0.519033, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[1.20196, [3, -0.466667, 0], [3, 0.333333, 0]], [1.22408, [3, -0.333333, 0], [3, 0.333333, 0]], [1.20351, [3, -0.333333, 0], [3, 0.333333, 0]], [1.22148, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[0.300231, [3, -0.466667, 0], [3, 0.333333, 0]], [0.598084, [3, -0.333333, 0], [3, 0.333333, 0]], [0.302215, [3, -0.333333, 0], [3, 0.333333, 0]], [0.598026, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[0.140758, [3, -0.466667, 0], [3, 0.333333, 0]], [1.55149, [3, -0.333333, 0], [3, 0.333333, 0]], [0.145414, [3, -0.333333, 0], [3, 0.333333, 0]], [1.55431, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[-0.182722, [3, -0.466667, 0], [3, 0.333333, 0]], [-0.144256, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.179778, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.142889, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([1.36, 2.36, 3.36, 4.36])
	keys.append([[0.091039, [3, -0.466667, 0], [3, 0.333333, 0]], [0.00390579, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0906948, [3, -0.333333, 0], [3, 0.333333, 0]], [0.000670414, [3, -0.333333, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished squat")
	except BaseException, err:
	  print err

def anim_macarena_post():
	# Choregraphe bezier export in Python.
	print("Performing macarena")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195184, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.185153, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.195395, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.184736, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.19569, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00461362, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("HipPitch")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0357826, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.561252, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0320451, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.552645, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0430962, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("HipRoll")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00549067, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("KneePitch")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.00502859, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00262045, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00262045, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00196798, [3, -0.185185, -0.00014287], [3, 0.185185, 0.00014287]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00176324, [3, -0.185185, 0], [3, 0.185185, 0]], [0.274263, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00385461, [3, -0.185185, 0], [3, 0.185185, 0]], [0.263909, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0171954, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.0147447, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0154849, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0154849, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0176013, [3, -0.185185, 0.00211635], [3, 0.185185, -0.00211635]], [-1.42116, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.42116, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.55843, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.55843, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.41062, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.41062, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.912755, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.912755, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.912755, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.912755, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.912755, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.524658, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.0182689, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0342458, [3, -0.185185, 0.0525147], [3, 0.185185, -0.0525147]], [-2.07654, [3, -0.185185, 0], [3, 0.185185, 0]], [-2.07394, [3, -0.185185, -0.00260044], [3, 0.185185, 0.00260044]], [0.327883, [3, -0.185185, 0], [3, 0.185185, 0]], [0.327883, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.41315, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.41315, [3, -0.185185, 0], [3, 0.185185, 0]], [0.503686, [3, -0.185185, 0], [3, 0.185185, 0]], [0.503686, [3, -0.185185, 0], [3, 0.185185, 0]], [0.303012, [3, -0.185185, 0], [3, 0.185185, 0]], [0.303012, [3, -0.185185, 0], [3, 0.185185, 0]], [0.303012, [3, -0.185185, 0], [3, 0.185185, 0]], [0.303012, [3, -0.185185, 0], [3, 0.185185, 0]], [0.303012, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.22807, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.969495, [3, -0.185185, 0], [3, 0.185185, 0]], [0.969237, [3, -0.185185, 0], [3, 0.185185, 0]], [0.969237, [3, -0.185185, 0], [3, 0.185185, 0]], [0.969495, [3, -0.185185, 0], [3, 0.185185, 0]], [0.969495, [3, -0.185185, 0], [3, 0.185185, 0]], [0.969495, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966262, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966262, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.966261, [3, -0.185185, 0], [3, 0.185185, 0]], [0.609164, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.047855, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0473003, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0473003, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0449321, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.144272, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.144272, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.144763, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.144763, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.256438, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.256438, [3, -0.185185, 0], [3, 0.185185, 0]], [1.39602, [3, -0.185185, 0], [3, 0.185185, 0]], [1.39602, [3, -0.185185, 0], [3, 0.185185, 0]], [1.38564, [3, -0.185185, 0], [3, 0.185185, 0]], [1.39581, [3, -0.185185, 0], [3, 0.185185, 0]], [1.38561, [3, -0.185185, 0], [3, 0.185185, 0]], [1.557, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.122234, [3, -0.185185, 0], [3, 0.185185, 0]], [0.131185, [3, -0.185185, 0], [3, 0.185185, 0]], [0.131185, [3, -0.185185, 0], [3, 0.185185, 0]], [0.127439, [3, -0.185185, 0], [3, 0.185185, 0]], [0.210687, [3, -0.185185, 0], [3, 0.185185, 0]], [0.210687, [3, -0.185185, 0], [3, 0.185185, 0]], [1.06011, [3, -0.185185, 0], [3, 0.185185, 0]], [1.06011, [3, -0.185185, 0], [3, 0.185185, 0]], [0.115331, [3, -0.185185, 0], [3, 0.185185, 0]], [0.115331, [3, -0.185185, 0], [3, 0.185185, 0]], [0.551257, [3, -0.185185, 0], [3, 0.185185, 0]], [0.551257, [3, -0.185185, 0], [3, 0.185185, 0]], [0.551257, [3, -0.185185, 0], [3, 0.185185, 0]], [0.551257, [3, -0.185185, 0], [3, 0.185185, 0]], [0.551257, [3, -0.185185, 0], [3, 0.185185, 0]], [0.14761, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.00198645, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.0100938, [3, -0.185185, 0.0120802], [3, 0.185185, -0.0120802]], [-1.04834, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04587, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04823, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04823, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04539, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04539, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04384, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04384, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04356, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04356, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04356, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04356, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.04356, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.00378925, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.520892, [3, -0.185185, 0], [3, 0.185185, 0]], [0.0206586, [3, -0.185185, 0], [3, 0.185185, 0]], [0.0206586, [3, -0.185185, 0], [3, 0.185185, 0]], [0.0288264, [3, -0.185185, 0], [3, 0.185185, 0]], [0.0210551, [3, -0.185185, 0], [3, 0.185185, 0]], [0.964602, [3, -0.185185, 0], [3, 0.185185, 0]], [0.964486, [3, -0.185185, 0], [3, 0.185185, 0]], [1.55271, [3, -0.185185, 0], [3, 0.185185, 0]], [1.54285, [3, -0.185185, 0.00985756], [3, 0.185185, -0.00985756]], [1.26185, [3, -0.185185, 0.00722569], [3, 0.185185, -0.00722569]], [1.25462, [3, -0.185185, 0.00722569], [3, 0.185185, -0.00722569]], [0.940188, [3, -0.185185, 0], [3, 0.185185, 0]], [0.940188, [3, -0.185185, 0], [3, 0.185185, 0]], [0.940188, [3, -0.185185, 0], [3, 0.185185, 0]], [0.940188, [3, -0.185185, 0], [3, 0.185185, 0]], [0.5248, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[1.22214, [3, -0.185185, 0], [3, 0.185185, 0]], [0.15309, [3, -0.185185, 0], [3, 0.185185, 0]], [0.15309, [3, -0.185185, 0], [3, 0.185185, 0]], [2.08092, [3, -0.185185, 0], [3, 0.185185, 0]], [2.07844, [3, -0.185185, 0.00247834], [3, 0.185185, -0.00247834]], [0.134411, [3, -0.185185, 0], [3, 0.185185, 0]], [0.136976, [3, -0.185185, -0.00256528], [3, 0.185185, 0.00256528]], [1.51748, [3, -0.185185, 0], [3, 0.185185, 0]], [1.51731, [3, -0.185185, 0.000167513], [3, 0.185185, -0.000167513]], [-0.418214, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.415898, [3, -0.185185, -0.00231605], [3, 0.185185, 0.00231605]], [-0.302162, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.302162, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.302162, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.302162, [3, -0.185185, 0], [3, 0.185185, 0]], [1.2281, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.605351, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.979129, [3, -0.185185, 0], [3, 0.185185, 0]], [0.609486, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[1.5519, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00935503, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00935503, [3, -0.185185, 0], [3, 0.185185, 0]], [0.0120252, [3, -0.185185, -0.000562842], [3, 0.185185, 0.000562842]], [0.0127321, [3, -0.185185, 0], [3, 0.185185, 0]], [0.000380218, [3, -0.185185, 0.000261011], [3, 0.185185, -0.000261011]], [0.000119207, [3, -0.185185, 0], [3, 0.185185, 0]], [0.000119207, [3, -0.185185, 0], [3, 0.185185, 0]], [0.000118043, [3, -0.185185, 0], [3, 0.185185, 0]], [0.150504, [3, -0.185185, 0], [3, 0.185185, 0]], [0.143036, [3, -0.185185, 0], [3, 0.185185, 0]], [1.41234, [3, -0.185185, 0], [3, 0.185185, 0]], [1.40233, [3, -0.185185, 0], [3, 0.185185, 0]], [1.41256, [3, -0.185185, 0], [3, 0.185185, 0]], [1.41254, [3, -0.185185, 0], [3, 0.185185, 0]], [1.55297, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[-0.148751, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.158237, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.158237, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.159238, [3, -0.185185, 0.00043098], [3, 0.185185, -0.00043098]], [-0.160823, [3, -0.185185, 0.00158511], [3, 0.185185, -0.00158511]], [-0.172176, [3, -0.185185, 0.00357036], [3, 0.185185, -0.00357036]], [-0.182246, [3, -0.185185, 0.0100693], [3, 0.185185, -0.0100693]], [-1.13835, [3, -0.185185, 0], [3, 0.185185, 0]], [-1.13536, [3, -0.185185, -0.0029898], [3, 0.185185, 0.0029898]], [-0.266555, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.273366, [3, -0.185185, 0.00681027], [3, 0.185185, -0.00681027]], [-0.551158, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.551158, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.551158, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.551158, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.147967, [3, -0.185185, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.5, 1.05556, 1.61111, 2.16667, 2.72222, 3.27778, 3.83333, 4.38889, 4.94444, 5.5, 6.05556, 6.61111, 7.16667, 7.72222, 8.27778, 8.83333])
	keys.append([[0.00324713, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.231752, [3, -0.185185, 0], [3, 0.185185, 0]], [-0.231752, [3, -0.185185, 0], [3, 0.185185, 0]], [0.910491, [3, -0.185185, 0], [3, 0.185185, 0]], [0.90229, [3, -0.185185, 0], [3, 0.185185, 0]], [0.90229, [3, -0.185185, 0], [3, 0.185185, 0]], [0.897642, [3, -0.185185, 0], [3, 0.185185, 0]], [0.897642, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894685, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894685, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894684, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894684, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894684, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894684, [3, -0.185185, 0], [3, 0.185185, 0]], [0.894684, [3, -0.185185, 0], [3, 0.185185, 0]], [0.00332906, [3, -0.185185, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.post.angleInterpolationBezier(names, times, keys)
	  print("Finished macarena")
	except BaseException, err:
	  print err

def anim_dab():
	# Choregraphe bezier export in Python.
	print("ANIM: Performing dab")
	from naoqi import ALProxy
	names = list()
	times = list()
	keys = list()

	names.append("HeadPitch")
	times.append([0.96, 1.56, 2.56])
	keys.append([[0.333244, [3, -0.333333, 0], [3, 0.2, 0]], [0.333244, [3, -0.2, 0], [3, 0.333333, 0]], [-0.154868, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("HeadYaw")
	times.append([0.96, 1.56, 2.56])
	keys.append([[-0.892296, [3, -0.333333, 0], [3, 0.2, 0]], [-0.892296, [3, -0.2, 0], [3, 0.333333, 0]], [-0.00243133, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowRoll")
	times.append([0.96, 1.56, 2.56])
	keys.append([[-0.411789, [3, -0.333333, 0], [3, 0.2, 0]], [-0.411789, [3, -0.2, 0], [3, 0.333333, 0]], [-0.411789, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LElbowYaw")
	times.append([0.96, 1.56, 2.56])
	keys.append([[-1.20783, [3, -0.333333, 0], [3, 0.2, 0]], [-1.20783, [3, -0.2, 0], [3, 0.333333, 0]], [-1.20783, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LHand")
	times.append([0.96, 1.56, 2.56])
	keys.append([[0.300448, [3, -0.333333, 0], [3, 0.2, 0]], [0.300448, [3, -0.2, 0], [3, 0.333333, 0]], [0.300448, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderPitch")
	times.append([0.96, 1.56, 2.56])
	keys.append([[1.44807, [3, -0.333333, 0], [3, 0.2, 0]], [1.44807, [3, -0.2, 0], [3, 0.333333, 0]], [1.45923, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LShoulderRoll")
	times.append([0.96, 1.56, 2.56])
	keys.append([[0.225102, [3, -0.333333, 0], [3, 0.2, 0]], [0.235923, [3, -0.2, 0], [3, 0.333333, 0]], [0.191421, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("LWristYaw")
	times.append([0.96, 1.56, 2.56])
	keys.append([[0.0907262, [3, -0.333333, 0], [3, 0.2, 0]], [0.0907262, [3, -0.2, 0], [3, 0.333333, 0]], [0.0907262, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowRoll")
	times.append([0.96, 1.56, 2.56])
	keys.append([[1.50648, [3, -0.333333, 0], [3, 0.2, 0]], [1.50648, [3, -0.2, 0], [3, 0.333333, 0]], [0.423851, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RElbowYaw")
	times.append([0.96, 1.56, 2.56])
	keys.append([[0.306578, [3, -0.333333, 0], [3, 0.2, 0]], [0.306578, [3, -0.2, 0], [3, 0.333333, 0]], [1.18881, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RHand")
	times.append([0.96, 1.56, 2.56])
	keys.append([[0.9773, [3, -0.333333, 0], [3, 0.2, 0]], [0.9773, [3, -0.2, 0], [3, 0.333333, 0]], [0.302463, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderPitch")
	times.append([0.96, 1.56, 2.56])
	keys.append([[0.06673, [3, -0.333333, 0], [3, 0.2, 0]], [0.06673, [3, -0.2, 0], [3, 0.333333, 0]], [1.46178, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RShoulderRoll")
	times.append([0.96, 1.56, 2.56])
	keys.append([[-0.183078, [3, -0.333333, 0], [3, 0.2, 0]], [-0.183078, [3, -0.2, 0], [3, 0.333333, 0]], [-0.184064, [3, -0.333333, 0], [3, 0, 0]]])

	names.append("RWristYaw")
	times.append([0.96, 1.56, 2.56])
	keys.append([[0.0999007, [3, -0.333333, 0], [3, 0.2, 0]], [0.0999007, [3, -0.2, 0], [3, 0.333333, 0]], [0.0999007, [3, -0.333333, 0], [3, 0, 0]]])

	try:
	  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
	  motion.angleInterpolationBezier(names, times, keys)
	  print("ANIM: Finished dab")
	except BaseException, err:
	  print err
